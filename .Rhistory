jura_vm_exp_fit1
plot(jura_v, jura_vm_exp_fit1)
# TO see till when I can continue to have the best fitted model
jura_vm_exp_fit2 = fit.variogram(jura_v, vgm(698, 'Exp', 0.27, 171 ))
jura_vm_exp_fit2
plot(jura_v, jura_vm_exp_fit2)
# Spherical with nugget
jura_vm_sph = fit.variogram(jura_v, vgm(698, 'Sph', 0.27, 171))
jura_vm_sph
plot(jura_v, jura_vm_sph)
# Matern, k=1
jura_vm_mat = fit.variogram(jura_v, vgm(698, 'Mat', 0.27, 171, k=1))
jura_vm_mat
plot(jura_v, jura_vm_mat)
# to fit Matern class models, need to specify k (this is held fixed)
# to overlay multiple fits, need to hand code the plots
#   below is base graphics, could use lattice (with latticeExtra) or ggplot2
# the variogramLine() function takes a SV model and the desired distance
#   and returns a data frame with finely spaced distances and gammas
# with(swiss_v, plot(dist, gamma))    # plot the empirical binned variogram
# lines(variogramLine(swiss_vm, maxdist=120000), lwd=2)
# lines(variogramLine(swiss_vm2, maxdist=120000), col=2, lwd=2)
# lines(variogramLine(swiss_vm3, maxdist=120000), col=4, lwd=2)
# legend('bottomright', bty='n', lty=1, col=c(1,2,4), lwd=2,
#        legend=c('Exponential','Spherical','Matern, k=1') )
knitr::opts_chunk$set(echo = TRUE)
### Question 1:
#### a) Recall on the midterm, you plotted the semivariogram cloud based on all 259 locations. Repeat that here, and include the plot.
setwd("C:/Spring 2022/Stat 576/HW#2")
jura=read.csv('juraZnfull-1.csv', as.is=T,, header=T)
#View(jura)
library(sf)
library(gstat)
jura_sf=st_as_sf(jura,coords=c("Xloc","Yloc"))
jura.vc = variogram(Zn~1, jura_sf, cloud=T)
# calculate variogram cloud
plot(jura.vc)
# unusual = plot(variogram(Zn~1, jura_sf, cloud=T), digitize=T)
# unusual = plot(jura.vc, digitize=T)
#### b. Does this plot (from part a) show evidence of non-zero spatial correlation? If there is spatial correlation, is this positive or negative? Briefly explain your answers.
const = variogram(Zn~1, jura_sf, alpha=c(45, 135))
plot(const)
##### Positive spatial autocorrelation occurs when Moran’s I is close to +1. This means values cluster together. For example, elevation datasets have similar elevation values close to each other.
##### Negative spatial auto-correlation occurs when Moran’s I is near -1. A checkerboard is an example where Moran’s I is -1 because dissimilar values are next to each other. A value of 0 for Moran’s I typically indicates no autocorrelation.
#No spatial correlation at the spatial scale of the observations, because we don't have any spatial structure (pure nugget)
#### c. If a pair of points has a semi-variance of 590, what is the difference in Zn concentrations between those two points?
##### from formula in "Classical" or Matheron estimator we have:
jura.v = variogram(Zn~1, jura_sf)
View(jura.v)
jura.sd = sqrt(2)*jura.v$gamma/sqrt(jura.v$np)
jura.sd
#### d. There are three points in the semivariogram cloud (so three pairs of data values) that have large semivariance (approx. 15000 for each pair) and moderate distance (circa 0.25 km). Identify the observations (by pairs of observation numbers) that produce these points in the cloud.
points <- which((jura.vc$gamma>14000 & 0.2<jura.vc$dist) & (jura.vc$gamma>14000 & jura.vc$dist<0.3) )
points
jura.vc[c(2417, 12192, 12333),]
# OR
jura.vc[points,]
#### d. On the Midterm, you plotted the Matheron estimator with default choices of cuto and number of bins. Reproduce that plot here, and then plot the empirical semivariogram using the Matheron estimator with 22 bins from 0 to 5.5 km (i.e., cuto=5.5, width=5.5/22). You will use one of these plots (this one or the one from the Midterm) to t a semivariogram model where you are interested in spatial pattern at short distances. Which will be more useful? Briefly explain your choice.
jura.vcut = variogram(Zn~1, jura_sf, cutoff=5.5, width=5.5/22)
plot(jura.vcut)
# Cressie-Hawkins estimator
jura.cressie = variogram(Zn~1, jura_sf, cressie=T)
jura.cressie
# to overlay the two, need to use base graphics
with(jura.v, plot(dist, gamma, xlab='Distance', ylab='Semivariance', type='l', , ylim=c(200, 1500)) )
with(jura.cressie, lines(dist, gamma, lty=2) )
library(stars)
#View(jura)
vgm()
# from 4 c we have:
jura_v = variogram(Zn~1, jura_sf)
# calculate empirical semi-variogram, assuming constant mean
# response = rain
# variogram fitting and kriging with fitted variogram
?fit.variogram
jura_vm_exp = fit.variogram(jura_v, vgm(400, 'Exp', 2, 500))
jura_vm_exp
plot(jura_v, jura_vm_exp)
jura_vm_exp_fit1 = fit.variogram(jura_v, vgm(700, 'Exp', 0.6, 300))
jura_vm_exp_fit1
plot(jura_v, jura_vm_exp_fit1)
# TO see till when I can continue to have the best fitted model
jura_vm_exp_fit2 = fit.variogram(jura_v, vgm(698, 'Exp', 0.27, 171 ))
jura_vm_exp_fit2
plot(jura_v, jura_vm_exp_fit2)
# Spherical with nugget
jura_vm_sph = fit.variogram(jura_v, vgm(698, 'Sph', 0.27, 171))
jura_vm_sph
plot(jura_v, jura_vm_sph)
# Matern, k=1
jura_vm_mat = fit.variogram(jura_v, vgm(698, 'Mat', 0.27, 171, k=1))
jura_vm_mat
plot(jura_v, jura_vm_mat)
# to fit Matern class models, need to specify k (this is held fixed)
# to overlay multiple fits, need to hand code the plots
#   below is base graphics, could use lattice (with latticeExtra) or ggplot2
# the variogramLine() function takes a SV model and the desired distance
#   and returns a data frame with finely spaced distances and gammas
# with(swiss_v, plot(dist, gamma))    # plot the empirical binned variogram
# lines(variogramLine(swiss_vm, maxdist=120000), lwd=2)
# lines(variogramLine(swiss_vm2, maxdist=120000), col=2, lwd=2)
# lines(variogramLine(swiss_vm3, maxdist=120000), col=4, lwd=2)
# legend('bottomright', bty='n', lty=1, col=c(1,2,4), lwd=2,
#        legend=c('Exponential','Spherical','Matern, k=1') )
jura_vm_gau = fit.variogram(jura_v, vgm(698, 'Gau', 0.27, 171))
jura_vm_gau
plot(jura_v, jura_vm_gau)
attr(jura_vm_exp,'SSErr')
attr(jura_vm_exp_fit1,'SSErr')
attr(jura_vm_sph,'SSErr')
attr(jura_vm_mat,'SSErr')
attr(jura_vm_gau,'SSErr')
# from 2.d we have
# Spherical with nugget
jura_vm_sph = fit.variogram(jura_v, vgm(698, 'Sph', 0.27, 171))
jura_vm_sph
plot(jura_v, jura_vm_sph)
# Spherical without nugget
jura_vm_sph_no = fit.variogram(jura_v, vgm(698, 'Sph', 0.27))
jura_vm_sph_no
plot(jura_v, jura_vm_sph_no)
jura_k = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_exp1)
jura_grid=read.csv('juragrid.csv', as.is=T,, header=T)
jura_locs=read.csv('juralocs.csv', as.is=T,, header=T)
jura_k = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_exp1)
jura_grid
jura_locs
View(jura_grid)
View(jura_locs)
View(jura_grid)
View(jura_grid)
View(jura_locs)
jura_grid=st_as_stars(jura_grd)
jura_grd=read.csv('juragrid.csv', as.is=T,, header=T)
jura_locs=read.csv('juralocs.csv', as.is=T,, header=T)
jura_grid=st_as_stars(jura_grd)
jura_k = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_exp1)
library(stars)
jura_grid=st_as_stars(jura_grd)
jura_grid
jura_sf = st_as_sf(jura_grd,coords=c("x","y"))
jura_locs
jura_grd=read.csv('juragrid.csv', as.is=T,, header=T)
jura_locs=read.csv('juralocs.csv', as.is=T,, header=T)
library(stars)
jura_grid=st_as_stars(jura_grd)
jura_sf = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_exp1)
jura_grd
View(jura)
jura_grd=read.csv('juragrid.csv', as.is=T,, header=T)
jura_locs=read.csv('juralocs.csv', as.is=T,, header=T)
library(stars)
jura_grid=st_as_stars(jura_grd)
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
View(jura)
jura_k = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_exp1)
knitr::opts_chunk$set(echo = TRUE)
### Question 1:
#### a) Recall on the midterm, you plotted the semivariogram cloud based on all 259 locations. Repeat that here, and include the plot.
setwd("C:/Spring 2022/Stat 576/HW#2")
jura=read.csv('juraZnfull-1.csv', as.is=T,, header=T)
#View(jura)
library(sf)
library(gstat)
jura_sf=st_as_sf(jura,coords=c("Xloc","Yloc"))
jura.vc = variogram(Zn~1, jura_sf, cloud=T)
# calculate variogram cloud
plot(jura.vc)
# unusual = plot(variogram(Zn~1, jura_sf, cloud=T), digitize=T)
# unusual = plot(jura.vc, digitize=T)
#### b. Does this plot (from part a) show evidence of non-zero spatial correlation? If there is spatial correlation, is this positive or negative? Briefly explain your answers.
const = variogram(Zn~1, jura_sf, alpha=c(45, 135))
plot(const)
##### Positive spatial autocorrelation occurs when Moran’s I is close to +1. This means values cluster together. For example, elevation datasets have similar elevation values close to each other.
##### Negative spatial auto-correlation occurs when Moran’s I is near -1. A checkerboard is an example where Moran’s I is -1 because dissimilar values are next to each other. A value of 0 for Moran’s I typically indicates no autocorrelation.
#No spatial correlation at the spatial scale of the observations, because we don't have any spatial structure (pure nugget)
#### c. If a pair of points has a semi-variance of 590, what is the difference in Zn concentrations between those two points?
##### from formula in "Classical" or Matheron estimator we have:
jura.v = variogram(Zn~1, jura_sf)
View(jura.v)
jura.sd = sqrt(2)*jura.v$gamma/sqrt(jura.v$np)
jura.sd
#### d. There are three points in the semivariogram cloud (so three pairs of data values) that have large semivariance (approx. 15000 for each pair) and moderate distance (circa 0.25 km). Identify the observations (by pairs of observation numbers) that produce these points in the cloud.
points <- which((jura.vc$gamma>14000 & 0.2<jura.vc$dist) & (jura.vc$gamma>14000 & jura.vc$dist<0.3) )
points
jura.vc[c(2417, 12192, 12333),]
# OR
jura.vc[points,]
#### d. On the Midterm, you plotted the Matheron estimator with default choices of cuto and number of bins. Reproduce that plot here, and then plot the empirical semivariogram using the Matheron estimator with 22 bins from 0 to 5.5 km (i.e., cuto=5.5, width=5.5/22). You will use one of these plots (this one or the one from the Midterm) to t a semivariogram model where you are interested in spatial pattern at short distances. Which will be more useful? Briefly explain your choice.
jura.vcut = variogram(Zn~1, jura_sf, cutoff=5.5, width=5.5/22)
plot(jura.vcut)
# Cressie-Hawkins estimator
jura.cressie = variogram(Zn~1, jura_sf, cressie=T)
jura.cressie
# to overlay the two, need to use base graphics
with(jura.v, plot(dist, gamma, xlab='Distance', ylab='Semivariance', type='l', , ylim=c(200, 1500)) )
with(jura.cressie, lines(dist, gamma, lty=2) )
library(stars)
#View(jura)
vgm()
# from 4 c we have:
jura_v = variogram(Zn~1, jura_sf)
# calculate empirical semi-variogram, assuming constant mean
# response = rain
# variogram fitting and kriging with fitted variogram
?fit.variogram
jura_vm_exp = fit.variogram(jura_v, vgm(400, 'Exp', 2, 500))
jura_vm_exp
plot(jura_v, jura_vm_exp)
jura_vm_exp_fit1 = fit.variogram(jura_v, vgm(700, 'Exp', 0.6, 300))
jura_vm_exp_fit1
plot(jura_v, jura_vm_exp_fit1)
# TO see till when I can continue to have the best fitted model
jura_vm_exp_fit2 = fit.variogram(jura_v, vgm(698, 'Exp', 0.27, 171 ))
jura_vm_exp_fit2
plot(jura_v, jura_vm_exp_fit2)
# Spherical with nugget
jura_vm_sph = fit.variogram(jura_v, vgm(698, 'Sph', 0.27, 171))
jura_vm_sph
plot(jura_v, jura_vm_sph)
# Matern, k=1
jura_vm_mat = fit.variogram(jura_v, vgm(698, 'Mat', 0.27, 171, k=1))
jura_vm_mat
plot(jura_v, jura_vm_mat)
# to fit Matern class models, need to specify k (this is held fixed)
# to overlay multiple fits, need to hand code the plots
#   below is base graphics, could use lattice (with latticeExtra) or ggplot2
# the variogramLine() function takes a SV model and the desired distance
#   and returns a data frame with finely spaced distances and gammas
# with(swiss_v, plot(dist, gamma))    # plot the empirical binned variogram
# lines(variogramLine(swiss_vm, maxdist=120000), lwd=2)
# lines(variogramLine(swiss_vm2, maxdist=120000), col=2, lwd=2)
# lines(variogramLine(swiss_vm3, maxdist=120000), col=4, lwd=2)
# legend('bottomright', bty='n', lty=1, col=c(1,2,4), lwd=2,
#        legend=c('Exponential','Spherical','Matern, k=1') )
jura_vm_gau = fit.variogram(jura_v, vgm(698, 'Gau', 0.27, 171))
jura_vm_gau
plot(jura_v, jura_vm_gau)
attr(jura_vm_exp,'SSErr')
attr(jura_vm_exp_fit1,'SSErr')
attr(jura_vm_sph,'SSErr')
attr(jura_vm_mat,'SSErr')
attr(jura_vm_gau,'SSErr')
# from 2.d we have
# Spherical with nugget
jura_vm_sph = fit.variogram(jura_v, vgm(698, 'Sph', 0.27, 171))
jura_vm_sph
plot(jura_v, jura_vm_sph)
# Spherical without nugget
jura_vm_sph_no = fit.variogram(jura_v, vgm(698, 'Sph', 0.27))
jura_vm_sph_no
plot(jura_v, jura_vm_sph_no)
jura_grd=read.csv('juragrid.csv', as.is=T,, header=T)
jura_locs=read.csv('juralocs.csv', as.is=T,, header=T)
library(stars)
jura_grid=st_as_stars(jura_grd)
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_exp1)
jura_k
jura_grd=read.csv('juragrid.csv', as.is=T,, header=T)
jura_locs=read.csv('juralocs.csv', as.is=T,, header=T)
library(stars)
jura_grid=st_as_stars(jura_grd)
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_sph)
jura_k
jura_grd=read.csv('juragrid.csv', as.is=T,, header=T)
jura_locs=read.csv('juralocs.csv', as.is=T,, header=T)
library(stars)
jura_grid=st_as_stars(jura_grd)
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_exp1)
jura_k
jura_grd=read.csv('juragrid.csv', as.is=T,, header=T)
jura_locs=read.csv('juralocs.csv', as.is=T,, header=T)
library(stars)
jura_grid=st_as_stars(jura_grd)
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_sph)
jura_k
jura_k$var1.pred
jura_grd=read.csv('juragrid.csv', as.is=T,, header=T)
jura_locs=read.csv('juralocs.csv', as.is=T,, header=T)
library(stars)
jura_grid=st_as_stars(jura_grd)
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k = krige(Zn ~ 1, jura_sf, jura_sf_loc, jura_vm_sph)
jura_k
jura_k$var1.pred
jura.sd = sqrt(2)*jura_k$gamma/sqrt(jura_k$np)
jura.sd = sqrt(2)*jura_k$var1.var
jura.sd
jura_grd=read.csv('juragrid.csv', as.is=T,, header=T)
jura_locs=read.csv('juralocs.csv', as.is=T,, header=T)
library(stars)
jura_grid=st_as_stars(jura_grd)
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k = krige(Zn ~ 1, jura_sf, jura_sf_loc, jura_vm_sph)
jura_k
plot(jura_k$var1.pred)
jura.sd = sqrt(2)*jura_k$var1.var
jura.sd
jura.sd = sqrt(2)*(jura_k$var1.var)
jura.sd
jura_k
jura_k$var1.pred
jura.sd = sqrt(2)*(jura_k$var1.var)
jura.sd
jura_grd=read.csv('juragrid.csv', as.is=T,, header=T)
jura_locs=read.csv('juralocs.csv', as.is=T,, header=T)
library(stars)
jura_grid=st_as_stars(jura_grd)
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k = krige(Zn ~ 1, jura_sf, jura_sf_loc, jura_vm_sph)
jura_k
jura_k$var1.pred
jura.sd = sqrt(jura_k$var1.var)
jura.sd
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k_pred = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_sph)
jura_k_pred
plot(jura_k_pred)
ggplot() + geom_stars(data = jura_k_pred, aes(fill = var1.pred, x = x, y = y)) +
scale_fill_viridis_c(option = "C")+
theme_minimal()+
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
legend.text = element_text(size=18,face="bold"),
legend.title=element_text(size=18,face="bold"))+
labs(fill="Prediction")
library(ggplot2)
ggplot() + geom_stars(data = jura_k_pred, aes(fill = var1.pred, x = x, y = y)) +
scale_fill_viridis_c(option = "C")+
theme_minimal()+
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
legend.text = element_text(size=18,face="bold"),
legend.title=element_text(size=18,face="bold"))+
labs(fill="Prediction")
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k_pred = krige(Zn ~ 1, jura_sf_loc, jura_grid, jura_vm_sph)
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k_pred = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_sph)
jura_k_pred
library(ggplot2)
ggplot() + geom_stars(data = jura_k_pred, aes(fill = var1.pred, x = x, y = y)) +
scale_fill_viridis_c(option = "C")+
theme_minimal()+
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
legend.text = element_text(size=18,face="bold"),
legend.title=element_text(size=18,face="bold"))+
labs(fill="Prediction")
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k_pred = krige(Zn ~ 1, jura_sf, jura_v, jura_vm_sph)
jura_k_pred = krige(Zn ~ 1, jura_sf, jura_locs, jura_vm_sph)
jura_sf_loc = st_as_sf(jura_locs,coords=c("Xlog","Yloc"))
jura_k_pred = krige(Zn ~ 1, jura_sf, jura_grid, jura_vm_sph)
jura_k_pred
library(ggplot2)
ggplot() + geom_stars(data = jura_k_pred, aes(fill = var1.pred, x = x, y = y)) +
scale_fill_viridis_c(option = "C")+
theme_minimal()+
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
legend.text = element_text(size=18,face="bold"),
legend.title=element_text(size=18,face="bold"))+
labs(fill="Prediction")
jura_cv = krige.cv(Zn~1, jura_sf, jura_vm_sph)
jura_cv
sqrt(mean(jura_cv$residual^2))
jura_cv = krige.cv(Zn~1, jura_sf, jura_vm_sph)
MSEP = jura_cv$residual^2
rMSEP = sqrt(mean(jura_cv$residual^2))
rMSEP = sqrt(mean(jura_cv$residual^2))
jura_cv = krige.cv(Zn~1, jura_sf, jura_vm_sph)
MSEP = jura_cv$residual^2
MSEP
rMSEP = sqrt(mean(jura_cv$residual^2))
rMSEP
MSEP
rMSEP
hist(jura_sf$Zn, col=Zn)
hist(jura_sf$Zn)
hist(jura_sf$Zn)
hist(log(jura_sf$Zn))
# Cressie-Hawkins estimator
jura.cressie_log = variogram(log(Zn~1), jura_sf, cressie=T)
# Cressie-Hawkins estimator
jura.cressie_log = variogram((log(Zn)~1), jura_sf, cressie=T)
jura.cressie_log
plot(jura.cressie_log)
# Spherical with nugget
jura.v_log = variogram((log(Zn)~1), jura_sf)
jura_vm_sph_log = fit.variogram(jura.v_log, vgm(698, 'Sph', 0.27, 171))
jura_vm_sph_log
plot(jura.v_log, jura_vm_sph)
jura_ssv = variogram(log(Zn)~1, jura_sf)
# can also specify log(rain) or I(1/rain), using I() to protect the 1/rain
jura_ssph = fit.variogram(jura_ssv, vgm(698,'Sph', 0.27,171))
# TG predictions
jura_tgk = krigeTg(Zn~1, jura_sf, jura_grid, jura_ssph, lambda=0 )
jura_ssv = variogram(log(Zn)~1, jura_sf)
# can also specify log(rain) or I(1/rain), using I() to protect the 1/rain
jura_ssph = fit.variogram(jura_ssv, vgm(698,'Sph', 0.27,171))
# TG predictions
jura_tgk = krigeTg(Zn~1, jura_sf, jura_grid, jura_ssph, lambda=0 )
jura_tgk
plot(jura_tgk)
ggplot() + geom_stars(data = jura_tgk, aes(fill = var1.pred, x = x, y = y)) +
scale_fill_viridis_c(option = "C")+
theme_minimal()+
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
legend.text = element_text(size=18,face="bold"),
legend.title=element_text(size=18,face="bold"))+
labs(fill="Prediction")
jura_ssv = variogram(log(Zn)~1, jura_sf)
# can also specify log(rain) or I(1/rain), using I() to protect the 1/rain
jura_ssph = fit.variogram(jura_ssv, vgm(698,'Sph', 0.27,171))
# TG predictions
jura_tgk = krigeTg(Zn~1, jura_sf, jura_grid, jura_ssph, lambda=0 )
jura_tgk
ggplot() + geom_stars(data = jura_tgk, aes(fill = exp(var1.pred), x = x, y = y)) +
scale_fill_viridis_c(option = "C")+
theme_minimal()+
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
legend.text = element_text(size=18,face="bold"),
legend.title=element_text(size=18,face="bold"))+
labs(fill="Prediction")
plot(jura_k_pred$var1.pred,exp(jura_tgk$var1.pred))
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
## ----install-packages----------------------------------------------------
install.packages(c("tidycensus", "tidyverse", "geofacet", "ggridges"))
install.packages(c("tidycensus", "tidyverse", "geofacet", "ggridges"))
knitr::opts_chunk$set(echo = TRUE)
## ----api-key-------------------------------------------------------------
library(tidycensus)
##
census_api_key("YOUR KEY GOES HERE", install = TRUE)
## ----api-key-------------------------------------------------------------
library(tidycensus)
## ----install-packages----------------------------------------------------
install.packages(c("tidycensus", "tidyverse", "geofacet", "ggridges"))
install.packages(c("tidycensus", "tidyverse", "geofacet", "ggridges"))
## ----api-key-------------------------------------------------------------
library(tidycensus)
.libPaths()
<html>
<html>
# Group the data by CRASH_YEAR and calculate the sum of each injury type
injury_data <- crash_data %>%
group_by(CRASH_YEAR) %>%
summarise(
FATALITIES = sum(FATALITIES),
INJURIES = sum(INJURIES),
MAJINJURY = sum(MAJINJURY),
MININJURY = sum(MININJURY),
POSSINJURY = sum(POSSINJURY)
)
# Execrise 4a
### I want to plot the number of #fatalities, injuries, major injuries,
### minor injuries, and possible injuries in each CRASH_YEAR
setwd("C:/Spring 2023/CRP 558/LA-558")
# Execrise 4a
### I want to plot the number of #fatalities, injuries, major injuries,
### minor injuries, and possible injuries in each CRASH_YEAR
setwd("C:/Spring 2023/CRP 558/LA-558")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read in the data
crash_data <- read.csv("Crash Data (SOURCE).csv")
# Group the data by CRASH_YEAR and calculate the sum of each injury type
injury_data <- crash_data %>%
group_by(CRASH_YEAR) %>%
summarise(
FATALITIES = sum(FATALITIES),
INJURIES = sum(INJURIES),
MAJINJURY = sum(MAJINJURY),
MININJURY = sum(MININJURY),
POSSINJURY = sum(POSSINJURY)
)
# Plot the data using ggplot2
ggplot(injury_data, aes(x = CRASH_YEAR)) +
geom_line(aes(y = FATALITIES, color = "Fatalities"), size = 1) +
geom_line(aes(y = INJURIES, color = "Injuries"), size = 1) +
geom_line(aes(y = MAJINJURY, color = "Major Injuries"), size = 1) +
geom_line(aes(y = MININJURY, color = "Minor Injuries"), size = 1) +
geom_line(aes(y = POSSINJURY, color = "Possible Injuries"), size = 1) +
labs(title = "Iowa Crash Data",
x = "Year",
y = "Number of Injuries",
color = "Injury Type") +
theme_bw()
ggplot(crash_data, aes(x = FATALITIES, fill = CRASH_YEAR)) +
geom_histogram(binwidth = 1, position = "dodge",
aes(y = ..density..), color = "white") +
facet_wrap(~DRUGALCREL) +
labs(title = "Histogram of Fatalities by DRUGALCREL and CRASH_YEAR",
x = "Number of Fatalities",
y = "Density") +
theme_bw()
